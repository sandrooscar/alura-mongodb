*** AULA01
* Setando diretorio db para o mongo server:

mongod --dbpath C:\PESSOAL\dev\alura2020\CursoMongoDB\db

* No cliente mongo: 

** Criando uma coleção ("tabela")
db.createCollection("alunos")

** Inserindo dados
{
	"nome": "Felipe",
	"data_nascimento": new Date(1994,02,26)
}

db.alunos.insert(
{
	"nome": "Felipe",
	"data_nascimento": new Date(1994,02,26)
}
)

** Inserindo mais dados  atributos

db.alunos.insert({
	"nome": "Felipe",
	"data_nascimento": new Date(1994,02,26),
	"curso": {
			"nome": "Sistemas de informação"
		},
	"notas": [10.0, 9.0, 4.5],
	"habilidades":[
		{
			"nome": "Inglês",
			"nível": "avançado"
		},
		{
			"nome": "taekwondo",
			"nível": "básico"
		}
	] 
})

** find básico
db.alunos.find()

** removendo objetos
db.alunos.remove(
{
	"_id": ObjectId("5e769d89cace9db69379132c")
}
)

** inserindo mais dados
As aspas são opcionais, ppor que usa-las? quando temos algum caracter especial na chave que gostariamos de considerar

db.alunos.insert(
{
	"nome": "Julio",
	"data_nascimento": new Date(1972,08,30),
	"curso": {
		"nome": "Medicina"
	},
	"Habilidades":[
		{
			"nome": "inglês",
			"nível": "avançado"
		}
	]
}
)

db.alunos.insert(
{
	nome: "Alberto",
	data_nascimento: new Date(1972,09,30),
	curso:{
		nome: "Engenharia Química"
	},
	habilidades: [
		{
			nome: "inglês",
			nível: "intermediário"
		}
	]
}
)

db.alunos.insert(
{
	nome: "Daniela",
	data_nascimento: new Date(1995, 09, 30),
	curso: {
		nome: "Moda"
	},
	habilidades: [
		{
			nome: "alemão",
			nível: "básico"
		}
	]
}
)

db.alunos.insert(
{
	nome: "Paulo",
	data_nascimento: new Date(1979, 12, 31),
	curso: {
		nome: "Ciências da Computação"
	},
	notas: [10, 9, 7],
	habilidades: [
		{
			nome: "Inglês",
			nível: "Avançado"
		},
		{
			nome: "Francês",
			nível: "Avançado"
		}

	]
}
)

** Como ficaria no banco relacional

create table cursos(
	id integer primary key auto_increment,
	nome varchar(255)
);

create table alunos (
	id integer primary key auto_increment,
	nome varchar(255), 
	curso_id integer, data_nascimento date

);

create table notas (
	id integer primary key auto_increment,
	nota decimal(3,2),
	aluno_id integer
);

create table habilidades (
	id integer primary key auto_increment,
	nome varchar(255),
	nivel varchar(255),
	aluno_id integer
);

** Vantagem e Desvantagem
Uma situação onde o MongoDB é bastante usado é quando precisamos realizar buscas por proximidade, como, por exemplo, localizar a pizzaria mais próxima de você.

Situações onde o uso do MongoDB não é indicado são cenários onde precisamos fazer muitas operações de agregação em uma única query, isso tem muito custo para o MongoDB.

*** AULA02 - Filtros

Formatação legivel:

db.alunos.find().pretty()

Pesquisa:
A maneira mais simples de pesquisar é passando um objeto de exemplo do que queremos procurar:

db.alunos.find(
{
	nome: "Felipe"
}
).pretty()


** Inserindo novo aluno com mesmo nome: 
Cada elemento pode ter uma estrutura diferente da outra.

db.alunos.insert(
{
        "nome" : "Felipe",
        "curso" : {
                "nome" : "Matemática"
        }
}
)

** Buscando por habilidades

Todos os alunos com habilidade Inglês

db.alunos.find(
{
	"habilidades.nome":"Inglês"
}
).pretty()

** Buscando por curso e habilidade

Todos os alunos de Ciências da Computação com habilidade Inglês
A consulta utiliza um objeto do javaScript

db.alunos.find(
{
	"curso.nome": "Ciências da Computação",
	"habilidades.nome":"Inglês"
}
).pretty()

O find sempre traz todos os campos do documento

** Operadores lógicos
* $or
db.alunos.find(
{
	$or : [
		{"curso.nome": "Sistemas de informação"},
		{"curso.nome": "Engenharia Química"}
	      ]
}
)

* tenhas as duas condições e o nome seja Daniela
db.alunos.find(
{
	$or : [
		{"curso.nome": "Sistemas de informação"},
		{"curso.nome": "Engenharia Química"}
	      ],
	"nome": "Daniela"
}
)

A Daniela esta no curso de moda
db.alunos.find(
{
	$or : [
		{"curso.nome": "Sistemas de informação"},
		{"curso.nome": "Engenharia Química"},
		{"curso.nome": "Moda"}
	      ],
	"nome": "Daniela"
}
)

* $in
db.alunos.find(
{
	"curso.nome": { $in : ["Sistemas de informação", "Engenharia Química", "Moda"]},
	nome: "Daniela"
}
)

db.alunos.find(
{
	"curso.nome": { $in : ["Sistemas de informação", "Engenharia Química", "Moda"]}
}
)

** Exercicios

db.alunos.find({nome: "Felipe"})

db.alunos.find(
{
	nome: "Felipe",
	data_nascimento: new date(1994,02,26)
}
)

ATENÇÃO: Quando usar o new Date() lembre-se que o mês vai de 0 (janeiro) à 11 (dezembro)

db.alunos.find(
{
	"habilidades.nome": "Inglês"
}
).pretty()

db.alunos.find(
{
	"curso.nome": { $in : ["Sistemas de informação", "Engenharia Química"]}
}
)

*** AULA03- Atualização completa ou parcial de documentos

db.alunos.insert(
{
	nome: "Fernado",
	data_nascimento: new Date(1994, 03, 26),
	notas: [10, 4.5, 7],
	curso: {
		nome: "Sistema de informação"
	}
}
)

db.alunos.find(
{
	"curso.nome": "Sistema de informação"
}
)

** Update é utilizado para trocar o valor de um documento

db.alunos.update(
{"curso.nome": "Sistema de informação"},
{
	"curso.nome": "Sistemas de informação"
}
)


* $set funciona como update de um determinado resgistro como no sql, se não usar o $set o documento é substituido

db.alunos.update(
{"curso.nome": "Sistema de informação"},
{
	$set : {
		"curso.nome": "Sistemas de Informação"
	}
}
)

ATENÇÃO: update por PADRÃO só atualizará o primeiro documento que encontrar, pq o conceito é de troca, é dificil vc querer atualizar N documentos por um só valor
O padrão é, torque todo o conteúdo SOMENTE do primeiro documento

ATENÇÃO: o update não aceita o sinal de ".". Assim, não podemos escrever dentro das chaves curso.nome.

db.alunos.update(
	{"curso.nome": "Sistemas De Informação"},
	{
		$set : {
			"curso.nome": "Sistemas de Informação"
			}
	},
	{
		multi : true
	}
)

** Mais operações e cuidados (Array e push each)

db.alunos.update(
{nome: "Felipe"},
{
	$push : {
		notas: 8.5
	}
}
)

db.alunos.update(
{nome: "Felipe"},
{
	$push : {
		notas: [8.5, 3]
	}
}
)

db.alunos.update(
{nome: "Felipe"},
{
	$set : {
		notas: [10, 9, 4.5, 8.5, 8.5]
	}
}
)

* Quero enviar para o array de notas cada um dos valores a seguir
db.alunos.update(
{nome: "Felipe"},
{
	$push : {
		notas: { $each : [8.5, 3] }
	}
}
)

* Exercicios:

db.alunos.update(
{nome: "Felipe"},
{
	nome: "Sandro",
	curso: {
		nome: "Ciencias da Computação"
	},
	habilidades:[
		{
			nome: "Inglês",
			nível: "Técnico"
		},
		{
			nome: "Java",
			nível: "Certificação z808"	
		},
		{
			nome: "SQL",
			nível: "Intermediário"
		}
	]
}
)


db.alunos.update(
{
	"curso.nome": "Engenharia de Produção"
}, 
{
	$set:
	{
		"curso.nome": "Administração"
	}
}, 
{
	multi:true
}
)

db.alunos.update(
{nome: "Felipe"},
{
	$push : {
			notas: 8.5
		}
}
)

db.alunos.insert(
{
	nome: "Guilherme",
	data_nascimento: new Date(1981,10,23),
	curso: {
		nome: "Ciências da Computação"
	},
	notas : [10, 7]
}
)

db.alunos.update(
{nome: "Guilherme"},
{
	$push : {
			notas: { 
					$each : [3,2,7.5]
				}
		}
}
)

*** AULA04 - Ordenando e limitando os dados

** Busca especifica por nota 8.5
db.alunos.find(
{
	notas: 8.5
}

** Busca por notas maiores que 5

db.alunos.find(
{
	notas : {
		$gt : 5
	}
}
)

db.alunos.insert(
{
	nome:"André",
	data_nascimento: new Date(1991, 01, 25),
	curso: {
		nome: "Matemática"
	},
	notas: [7, 5, 9, 4.5]
}
)

db.alunos.insert(
{
	nome: "Lúcia",
	data_nascimento: new Date(1987, 07, 17),
	curso: {
		nome: "Matemática"
	},
	notas: [8, 9.5, 10]
}
)

** Buscando apenas um documento que satisfaça a condição

db.alunos.findOne(
{
	notas : {
		$gt : 5
	}
}
)

** ordenando registros

* Ordenando de forma crescente (menor para o maior)
db.alunos.find().sort(
{
	"nome":1
})

** limitando
db.alunos.find().sort(
{
	"nome":1
}).limit(3)

** decrescente
db.alunos.find().sort(
{
	"nome":-1
})

** Exercicios
db.alunos.find(
{
	notas: {
		$lt : 5
	}
}
)

db.alunos.findOne(
{
	"curso.nome" : "Sistemas De Informação"
}
)